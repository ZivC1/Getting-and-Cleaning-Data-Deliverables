merged.sorted <- arrange(merged, desc(X.1))
str(merged.sorted$X.4)
str(merged.sorted$X.4)[4]
merged.sorted$X.4
merged.sorted$X.4[1]
as.numeric(merged.sorted$X.4[1])
as.numeric(merged.sorted$X.4)
merged.sorted$X.4[19]
as.numeric(merged.sorted$X.4[19])
?as.numeric()
str(merged.sorted$X.4[3])
str(merged.sorted$X.4[19])
a=str(merged.sorted$X.4[19])
a
a=merged.sorted$X.4[19]
a
as.numeric(a)
as.numeric_version(a)
as.numeric(" 1,134 ")
as.numeric(" 1134 ")
b <- sub( ",", "", a )
b
y= sub( ",", "", merged.sorted$X.4 )
y
merged.sorted$X.4 <-  sub( ",", "", merged.sorted$X.4 ) # remove commas from character strings in X.4. In preperation for #function as.numeric() which can't handle commas
filter(merged.sorted, Income.Group == "High income: nonOECD") %>% mean(as.numeric(X.1))
filter(merged.sorted, Income.Group == "High income: nonOECD") %>% mean(as.numeric(X.4))
filter(merged.sorted, Income.Group == "High income: nonOECD") %>% mean(as.numeric(merged.sorted$X.4))
merged.sorted$X.4[1:10]
merged.sorted$X.4 <- as.numeric(merged.sorted$X.4)
merged.sorted$X.4 <-  sub( ",", "", merged.sorted$X.4 )
gdp <-rename(gdp, CountryCode=X)
merged <- merge(gdp,edu, by = "CountryCode")
merged.sorted <- arrange(merged, desc(X.1))
# Question 3
#------------
merged.sorted$X.4 <-  sub( ",", "", merged.sorted$X.4 ) # remove commas from character strings in X.4. In preperation for #function as.numeric() which can't handle commas
merged.sorted$X.4 <-  sub( ",", "", merged.sorted$X.4 )
edu<- read.csv("./data/edu.csv")
gdp<- read.csv("./data/gdp.csv", skip = 4, nrows = 190, stringsAsFactors=FALSE) # first 4 lines are rubbish. question asks to load only 190 ranked countries
library(dplyr)
gdp <-rename(gdp, CountryCode=X)
merged <- merge(gdp,edu, by = "CountryCode")
merged.sorted <- arrange(merged, desc(X.1))
# Question 3
#------------
merged.sorted$X.4 <-  sub( ",", "", merged.sorted$X.4 ) # remove commas from character strings in X.4. In preperation for #function as.numeric() which can't handle commas
merged.sorted$X.4 <-  sub( ",", "", merged.sorted$X.4 )
merged.sorted$X.4 <- as.numeric(merged.sorted$X.4)
merged.sorted$X.4
filter(merged.sorted, Income.Group == "High income: nonOECD") %>% mean(as.numeric(merged.sorted$X.4))
filter(merged.sorted, Income.Group == "High income: nonOECD") %>% mean(merged.sorted$X.4)
is.numeric(merged.sorted$X.4)
mean(merged.sorted$X.4)
filter(merged.sorted, Income.Group == "High income: nonOECD") %>% mean(merged.sorted$X.4)
f=filter(merged.sorted, Income.Group == "High income: nonOECD")
View(f)
filter(merged.sorted, Income.Group == "High income: nonOECD") %>% mean(X.4)
summarize(filter(merged.sorted, Income.Group == "High income: nonOECD"), avg = mean(X.4))
View(merged.sorted)
summarize(filter(merged.sorted, Income.Group == "High income: nonOECD"), avg = mean(X.1))
summarize(filter(merged.sorted, Income.Group == "High income: OECD"), avg = mean(X.1))
levels(meged.sorted$Income.Group)
levels(merged.sorted$Income.Group)
a=merged.sorted
quantile(a$X.1)
190-43
190-143
quantile(a$X.1, na.rm = TRUE, probs = c(0.2, 0.4, 0.6, 0.8, 1))
install.packages("Hmics")
library(Hmisc)
a <- merged.sorted  # just to save typing
a$quantGroups <- cut2(a$X.1, g=5)
str(a)
Head(a$quantGroups)
View(a)
levels(a$quantGroups)
table(a$Income.Group, a$quantGroups)
table(a$quantGroups)
a$X.1
View(merged.sorted)
View(gdp)
View(merged)
View(merged.sorted)
mutate(a, rank = seq(1,189,1))
a <- merged.sorted  # just to save typing
mutate(a, rank=seq(189,1,1))
?seq()
mutate(a, rank=seq(189,1,by=-1))
a <- merged.sorted  # just to save typing
a<- mutate(a, rank=seq(189,1,by=-1))
library(Hmics)
a$quantGroups <- cut2(a$X.1, g=5)
table(a$Income.Group, a$quantGroups)
table(a$quantGroups)
View(merged.sorted)
setwd("~/Coursera/Getting and cleaning data/Project")
install.packages("downloader")
url01 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
library(downloader)
download.file(url = url01, destfile= "dataset.zip",mode = "wb", exdir = "./")
download.file(url = url01, destfile= "dataset.zip",mode = "wb")
unzip( "dataset.zip", exdir = "./")
17*18
cwd("UCI HAR Dataset")
swd("UCI HAR Dataset")
setwd("UCI HAR Dataset")
dir()
X_test <- read.table("~/test/X_test.txt", sep = " ", na.strings = NA, nrows=100)
X_test <- read.table("./test/X_test.txt", sep = " ", na.strings = NA, nrows=100)
X_test <- read.table("./test/X_test.txt", nrows=100)
View(X_test)
dim(X_test)
X_test <- read.table("./test/X_test.txt", na.strings = NA, nrows=100)
X_test <- read.table("./test/X_test.txt", na.strings = NA)
dim(X_test)
Y_test <- read.table("./test/y_test.txt", na.strings = NA)
subject_test <- read.table("./test/subject_test.txt", na.strings = NA)
dim(Y_test)
dim(subject_test)
x_test <- read.table("./test/X_test.txt", na.strings = NA)
y_test <- read.table("./test/y_test.txt", na.strings = NA)
TestUnified <-cbind(subject_test, x_text)
x_train <- read.table("./train/X_train.txt", na.strings = NA)
y_train <- read.table("./test/y_train.txt", na.strings = NA)
y_train <- read.table("./train/y_train.txt", na.strings = NA)
subject_train <- read.table("./train/subject_train.txt", na.strings = NA)
unified_test <-cbind(subject_test, x_test) # subect id in the first column
unified_test >cbind(unified_test, y_test) #  the outcome "y" is in the last column
unified_test <- cbind(unified_test, y_test) #  the outcome "y" is in the last column
unified_test[1:4, 1:7]
unified_test[1:4, ncol(unified_test)-4:ncol(unified_test)-4 ]
unified_test[1:4, ncol(unified_test)-4:ncol(unified_test)]
unified_test[1:4, ]
unified_train <-cbind(subject_train, x_train) # subect id in the first column
unified_train <- cbind(unified_train, y_train) #  the outcome "y" is in the last column
unified <- rbind(unified_train, unified_test)
dim(unified)
names(unified)
col_names <- read.table("features.txt")
head(col_names)
dim(col_names)
head(col_names, 50)
str(col_names)
col_names <- read.table("features.txt", stringsAsFactors = FALSE)
str(col_names)
col_names[, 1] <- NULL   # omit first column
str(col_names)
col_names <- rbind(as.data.frame("user_id"), col_names)
as.data.frame("user_id")
x=as.data.frame("user_id")
x
col_names <- rbind(x, col_names)
y=rbind(col_names,x)
str(x)
str(col_names)
x=as.data.frame(as.character("user_id"))
str(x)
x=as.data.frame("user_id")
x=as.character(x)
x
x= data.frame(V2 = "user_name")
x
str(x)
x[1,1] <- as.character(x[1,1])
str(x)
x=data.frame((time=c(1,2,3), nm= c("aa","bb", "cc")))
x=data.frame(time=c(1,2,3), nm= c("aa","bb", "cc"))
x
str(x)
y= c("aa", "bb")
y
str(y)
y[1]
y[3]<-"gg"
y[0]<- ll
y[0]<- "ll"
y
str(col_names
)
x= data.frame(V2 = as.character("user_name"))
x
class(x)
class(x[1,1])
unclass(x[1,1])
class(x[1,1])
x<- data.frame(c("aaaa"))
str(x)
v<- "user_name9999"
str(v)
x=data.frame(v)
str(x)
x=as.data.frame(v)
str(x)
?data.frame
x=as.data.frame("klkjsldkfj", stringAsFactors = FALSE)
str(x)
x=data.frame("klkjsldkfj", stringAsFactors = FALSE)
str(x)
x=data.frame("klkjsldkfj", stringsAsFactors = FALSE)
str(x)
temp  <- data.frame(V2 = "user_name", stringsAsFactors = FALSE)
str(temp)
temp  <- data.frame(V2 = "user_id", stringsAsFactors = FALSE)
col_names <- rbind(temp, col_names)  # attach "user_id to front
head(col_names)
temp  <- data.frame(V2 = "activity code", stringsAsFactors = FALSE)
col_names <- rbind(col_names, temp)  # attach "activity code" to back
tail(col_names)
head(col_names)
dim(col_names)
head(mtcars)
b=t(mtcars)
head(b)
z=col_names
dim(z)
dim(t(z))
z=t(z)
dim(z)
col_names <- t(col_names)  # put all names in columns
View(col_names)
head(unified[1:4, 1:5)
head(unified[1:4, 1:5])
?colnames()
v<- as.character(col_names[1,])
head(v)
?as.character()
colnames(unified, v)
unname(col_names)
?unname()
unified <- unname(unified)
names(unified)
colnames(unified, v)
x=mtcars[1:10, 1:4]
x
x<-uname(x)
x<-unname(x)
x
colnames(x, c="a", "b", "c", "d")
colnames(x, c("a", "b", "c", "d"))
colnames(x) <- c("a", "b", "c", "d"))
colnames(x) <- c("a", "b", "c", "d")
x
v<-  c("a", "b", "c", "d")
colnames(x) <- c
colnames(x) <- v
x
unname(x)
colnames(x) <- v
x
unname(x)
v<-  c("a", "b", "c", "d")
vec <- as.vector(col_names)
head(vec)
v <- vec[1:4]
v
colnames(x) <- v
x
colnames(unified) <- as.vector(col_names)
unified[1:4, 1:6]
unified[1:4, 560:563]
names(unified)
vec <- grepl("mean$|std$", names(unified))
sum(vec)
names(unified)
temp  <- data.frame(V2 = "activity_code", stringsAsFactors = FALSE)
col_names <- rbind(col_names, temp)  # attach "activity code" to back
col_names <- t(col_names)  # put all names in columns in stead of rows
colnames(unified) <- as.vector(col_names) #"unified" now has all columns
unified <- rbind(unified_train, unified_test)
dim(unified)
## Step 2- Extracts only the measurements on the mean and standard deviation for each measurement.
#-----------------------------------
# add column names to the table
col_names <- read.table("features.txt", stringsAsFactors = FALSE)
col_names[, 1] <- NULL   # omit first column
temp  <- data.frame(V2 = "user_id", stringsAsFactors = FALSE)
col_names <- rbind(temp, col_names)  # attach "user_id to front
temp  <- data.frame(V2 = "activity_code", stringsAsFactors = FALSE)
col_names <- rbind(col_names, temp)  # attach "activity code" to back
col_names <- t(col_names)  # put all names in columns in stead of rows
colnames(unified) <- as.vector(col_names) #"unified" now has all columns
vec <- grepl("mean$|std$", names(unified))
sum(vec)
sum(vec)
vec <- grepl("mean()$|std()", names(unified))
sum(vec)
unified_mean_std <- unified[, vec]  # subset the dataframe with the logial vect
dim(unified_mean_std)
unified_mean_std <- cbind(unified$user_id, unified_mean_std)
unified_mean_std <- cbind(unified_mean_std, unified$activity_code)
dim(unified_mean_std)
vec <- grepl("mean()$|std()|user_id|activity_code", names(unified)) # find column positions
sum(vec)
unified_mean_std <- unified[, vec]  # subset the dataframe with the logial vect
dim(unified_mean_std)
activity_labels <- read.table("activity_labels.txt.txt", stringsAsFactors = FALSE)
getwd()
dir()
activity_labels <- read.table("activity_labels.txt", stringsAsFactors = FALSE)
str(activity_labels
)
View(activity_labels)
col_names <- read.table("features.txt", stringsAsFactors = FALSE)
col_names[, 1] <- NULL   # omit first column
temp  <- data.frame(V2 = "user_id", stringsAsFactors = FALSE)
col_names <- rbind(temp, col_names)  # attach "user_id to front
temp  <- data.frame(V2 = "activity", stringsAsFactors = FALSE)
col_names <- rbind(col_names, temp)  # attach "activity code" to back
col_names <- t(col_names)  # put all names in columns in stead of rows
colnames(unified) <- as.vector(col_names) #"unified" now has all columns
vec <- grepl("mean()$|std()|user_id|activity_code", names(unified)) # find column positions
unified_mean_std <- unified[, vec]  # subset the dataframe with the logial vect
## Step 3- Uses descriptive activity names to name the activities in the data set
#-----------------------------------
activity_labels <- read.table("activity_labels.txt", stringsAsFactors = FALSE)
# perform subsetting to replace the activity code of 1..6 to labels "walking" "sitting"...
unified_mean_std$activity <- activity_labels$V2[unified_mean_std$activity]
str(activity_labels)
activity_labels
str(unified$activity)
unified_test <-cbind(subject_test, x_test) # subect id in the first column
unified_test <- cbind(unified_test, y_test) #  the outcome "y" is in the last column
# add required columns to train set
unified_train <-cbind(subject_train, x_train) # subect id in the first column
unified_train <- cbind(unified_train, (y_train)) #  the outcome "y" is in the last column. charachter b/c of later replacement with labels
# combine the test and train files
unified <- rbind(unified_train, unified_test)
dim(unified)
## Step 2- Extracts only the measurements on the mean and standard deviation for each measurement.
#-----------------------------------
# add column names to the table
col_names <- read.table("features.txt", stringsAsFactors = FALSE)
col_names[, 1] <- NULL   # omit first column
temp  <- data.frame(V2 = "user_id", stringsAsFactors = FALSE)
col_names <- rbind(temp, col_names)  # attach "user_id to front
temp  <- data.frame(V2 = "activity_code", stringsAsFactors = FALSE)
col_names <- rbind(col_names, temp)  # attach "activity code" to back
col_names <- t(col_names)  # put all names in columns in stead of rows
colnames(unified) <- as.vector(col_names) #"unified" now has all columns
vec <- grepl("mean()$|std()|user_id|activity_code", names(unified)) # find column positions
unified_mean_std <- unified[, vec]  # subset the dataframe with the logial vect
# add required columns to test set
unified_test <-cbind(subject_test, x_test) # subect id in the first column
unified_test <- cbind(unified_test, y_test) #  the outcome "y" is in the last column
# add required columns to train set
unified_train <-cbind(subject_train, x_train) # subect id in the first column
unified_train <- cbind(unified_train, (y_train)) #  the outcome "y" is in the last column. charachter b/c of later replacement with labels
# combine the test and train files
unified <- rbind(unified_train, unified_test)
dim(unified)
## Step 2- Extracts only the measurements on the mean and standard deviation for each measurement.
#-----------------------------------
# add column names to the table
col_names <- read.table("features.txt", stringsAsFactors = FALSE)
col_names[, 1] <- NULL   # omit first column
temp  <- data.frame(V2 = "user_id", stringsAsFactors = FALSE)
col_names <- rbind(temp, col_names)  # attach "user_id to front
temp  <- data.frame(V2 = "activity_code", stringsAsFactors = FALSE)
col_names <- rbind(col_names, temp)  # attach "activity code" to back
col_names <- t(col_names)  # put all names in columns in stead of rows
colnames(unified) <- as.vector(col_names) #"unified" now has all columns
# search of indices of column names that fits the criteria
vec <- grepl("mean()$|std()|user_id|activity_code", names(unified)) # find column positions
unified_mean_std <- unified[, vec]  # subset the dataframe with the logial vect
unified_mean_std$activity_label <- activity_labels$V2[unified_mean_std$activity]
dim(unified_mean_std)
names(unified_mean_std)
unified_mean_std$activity_code <- NULL
names(unified_mean_std)
unified_mean_std[,33:36]
unified_mean_std[ ,32:35]
library (dplyr)
mtcars
dim(mtcars)
group_by(mtcars, drat)
x=group_by(x, vs)
x=group_by(mtcars), vs)
x=group_by(mtcars, vs)
dim(x)
x
mtcars
dim(mtcars)
summerize(group_by(mtcars, cyl), mean(mpg))
summarize(group_by(mtcars, cyl), mean(mpg))
View(x)
str(x)
names(unified_mean_std)
names(unified)
add required columns to test set
unified_test <-cbind(subject_test, x_test) # subect id in the first column
unified_test <- cbind(unified_test, y_test) #  the outcome "y" is in the last column
# add required columns to train set
unified_train <-cbind(subject_train, x_train) # subect id in the first column
unified_train <- cbind(unified_train, (y_train)) #  the outcome "y" is in the last column. charachter b/c of later replacement with labels
# combine the test and train files
unified <- rbind(unified_train, unified_test)
dim(unified)
## Step 2- Extracts only the measurements on the mean and standard deviation for each measurement.
#-----------------------------------
# add column names to the table
col_names <- read.table("features.txt", stringsAsFactors = FALSE)
col_names[, 1] <- NULL   # omit first column
temp  <- data.frame(V2 = "user_id", stringsAsFactors = FALSE)
col_names <- rbind(temp, col_names)  # attach "user_id to front
temp  <- data.frame(V2 = "activity_code", stringsAsFactors = FALSE)
col_names <- rbind(col_names, temp)  # attach "activity code" to back
col_names <- t(col_names)  # put all names in columns in stead of rows
colnames(unified) <- as.vector(col_names) #"unified" now has all columns
# search of indices of column names that fits the criteria
vec <- grepl("mean()|std()|user_id|activity_code", names(unified)) # find column positions
unified_mean_std <- unified[, vec]  # subset the dataframe with the logial vect
## Step 3- Uses descriptive activity names to name the activities in the data set
#-----------------------------------
activity_labels <- read.table("activity_labels.txt", stringsAsFactors = FALSE)
# perform subsetting to create a new column that hold labels: "sitting" "walking"...
unified_mean_std$activity_label <- activity_labels$V2[unified_mean_std$activity]
# delete the column that holds the activity code
unified_mean_std$activity_code <- NULL
dim(unified_mean_std)
names(unified_mean_std)
ggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)
agregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)
aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)
aggregate(mtcars$mpg, by=list(cyl=mtcars$cyl), FUN=mean)
aggregate(mpg=mtcars$mpg, by=list(cyl=mtcars$cyl), FUN=mean)
aggregate("mpg"=mtcars$mpg, by=list(cyl=mtcars$cyl), FUN=mean)
aggregate(mtcars$mpg, by=list(cyl=mtcars$cyl), FUN=mean)
aggregate(mtcars$mpg, by=list(cyl, vs ), FUN=mean)
aggregate(mtcars$mpg, by=list(mtcars$cyl, mtcars$vs), FUN=mean)
?group_by()
by_cyl <- group_by(mtcars, cyl)
summarise(by_cyl, mean(disp), mean(hp))
by_cyl <- group_by(mtcars, cyl)
summarise_each(by_cyl, FUN=mean)
?summarize_each()
head(iris)
by_species <- iris %>% group_by(Species)
by_species %>% summarise_each(funs(length))
by_species %>% summarise_each(funs(mean))
by_id_activity <- unified_mean_std %>% group_by(user_id, activity_label)
final <- by_id_activity %>% summarise_each(funs(mean))
head(final)
dim(final)
View(final)
dim(unified_mean_std)
unique(unified_mean_std$user_id)
length(unique(unified_mean_std$user_id))
length(unique(unified_mean_std$activity_label))
write.table(final, row.names = FALSE, file = "final delivery.txt")
aa <- read.table("final_delivery.txt", na.strings = NA)
head(aa)
dim(aa)
View(aa)
?write.table()
write.table(final, row.names = FALSE, col.name = TRUE, file = "final delivery.txt")
aa <- read.table("final_delivery.txt")
dim(aa)
aa=NULL
aa
write.table(final, row.names = FALSE, col.name = TRUE, file = "final delivery.txt")
aa <- read.table("final_delivery.txt")
dim(aa)
dim(final)
View(aa)
write.table(final, row.names = FALSE, col.name = TRUE, file = "final delivery.txt")
aa <- read.table("final_delivery.txt")
write.table(summarized_tidy_data, row.names = FALSE, col.name = TRUE, file = "summ_tidy_data.txt")
summarized_tidy_data <- by_id_activity %>% summarise_each(funs(mean))
write.table(summarized_tidy_data, row.names = FALSE, col.name = TRUE, file = "summ_tidy_data.txt")
aa <- read.table("summ_tidy_data.txt")
dim(summarized_tidy_data)
dim(aa)
aa <- read.table("summ_tidy_data.txt", col.names = TRUE)
View(aa)
write.table(summarized_tidy_data, row.names = FALSE, col.name = TRUE, file = "summ_tidy_data.txt")
aa <- read.table("summ_tidy_data.txt", col.names = TRUE)
x=summarized_tidy_data[1:3,1:5]
x
aa <- read.table("summ_tidy_data.txt", col.names = TRUE)
write.table(x, row.names = FALSE, col.name = TRUE, file = "xxx.txt")
aa <- read.table("xxx.txt", col.names = TRUE)
dim(aa)
write.table(x, row.names = FALSE, col.name = TRUE, sep =" ", file = "xxx.txt")
aa <- read.table("xxx.txt", col.names = TRUE, row.names = FALSE, sep = " ")
x=mtcars
write.table(x, row.names = FALSE, col.name = TRUE, sep =" ", file = "xxx.txt")
aa <- read.table("xxx.txt", col.names = TRUE, row.names = FALSE, sep = " ")
write.table(x, row.names = FALSE, col.name = TRUE, sep =",", file = "xxx.txt")
aa <- read.table("xxx.txt", col.names = TRUE, row.names = FALSE, sep = " ")
aa <- read.table("xxx.txt", col.names = TRUE, row.names = FALSE, sep = ",")
write.csv(summarized_tidy_data, row.names = FALSE, col.name = TRUE, file = "summ_tidy_data.txt")
write.csv(summarized_tidy_data, row.names = FALSE,  file = "summ_tidy_data.txt")
bb <- read.table("summ_tidy_data.txt", col.names = TRUE)
View(bb)
bb <- read.csv("summ_tidy_data.txt")
write.table(summarized_tidy_data, row.names = FALSE,  file = "summ_tidy_data.txt")
bb <- read.table("summ_tidy_data.txt")
View(bb)
write.table(summarized_tidy_data, row.names = FALSE, col.names = TRUE, file = "summ_tidy_data.txt")
bb <- read.table("summ_tidy_data.txt")
bb <- read.table("summ_tidy_data.txt", col.names = TRUE)
names(bb)
setwd("~/Coursera/Getting and cleaning data/Project/Getting-and-Cleaning-Data-Deliverables")
write.csv(summarized_tidy_data, row.names = FALSE,  file = "summ_tidy_data.txt")
bb <- read.table("summ_tidy_data.txt", col.names = TRUE)
cc <- read.table("summ_tidy_data.txt", col.names = TRUE)
View(bb)
View(bb)
cc <- read.table("summ_tidy_data.txt", col.names = TRUE, sep = ",")
dim(summarized_tidy_data)
dim(summ_tidy_data)
